@import "theme_utility_maps";
@import "theme_utility_mixins";


// Utilities
.container {
    width: 100%;
}

@media (min-width: 640px) {
    .container {
        max-width: 640px;
    }
}

@media (min-width: 768px) {
    .container {
        max-width: 768px;
    }
}

@media (min-width: 1024px) {
    .container {
        max-width: 1024px;
    }
}

@media (min-width: 1280px) {
    .container {
        max-width: 1280px;
    }
}

@media (min-width: 1536px) {
    .container {
        max-width: 1536px;
    }
}

// screenreader styles

.sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border-width: 0;
}

.not-sr-only {
    position: static;
    width: auto;
    height: auto;
    padding: 0;
    margin: 0;
    overflow: visible;
    clip: auto;
    white-space: normal;
}

.focus-within\:sr-only:focus-within {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border-width: 0;
}

.focus-within\:not-sr-only:focus-within {
    position: static;
    width: auto;
    height: auto;
    padding: 0;
    margin: 0;
    overflow: visible;
    clip: auto;
    white-space: normal;
}

.focus\:sr-only:focus {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border-width: 0;
}

.focus\:not-sr-only:focus {
    position: static;
    width: auto;
    height: auto;
    padding: 0;
    margin: 0;
    overflow: visible;
    clip: auto;
    white-space: normal;
}

.appearance-none {
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
}

// bg styles

.bg {
    @include modifiers(
        $map: $colors-map,
        $attribute: "background-color",
        $prefix: "-"
    );
}

.group:hover .group-hover\:bg {
    @include modifiers(
        $map: $colors-map,
        $attribute: "background-color",
        $prefix: "-"
    );
}

.focus-within\:bg {
    @include modifiers(
        $map: $colors-map,
        $attribute: "background-color",
        $prefix: "-",
        $suffix: ":focus-within"
    );
}

.hover\:bg {
    @include modifiers(
        $map: $colors-map,
        $attribute: "background-color",
        $prefix: "-",
        $suffix: ":hover"
    );
}

.focus\:bg {
    @include modifiers(
        $map: $colors-map,
        $attribute: "background-color",
        $prefix: "-",
        $suffix: ":focus"
    );
}

.bg-fixed {
    background-attachment: fixed;
}

.bg-local {
    background-attachment: local;
}

.bg-scroll {
    background-attachment: scroll;
}

.bg-clip-border {
    background-clip: border-box;
}

.bg-clip-padding {
    background-clip: padding-box;
}

.bg-clip-content {
    background-clip: content-box;
}

.bg-clip-text {
    -webkit-background-clip: text;
    background-clip: text;
}

.bg-none {
    background-image: none;
}

.bg-bottom {
    background-position: bottom;
}

.bg-center {
    background-position: center;
}

.bg-left {
    background-position: left;
}

.bg-left-bottom {
    background-position: left bottom;
}

.bg-left-top {
    background-position: left top;
}

.bg-right {
    background-position: right;
}

.bg-right-bottom {
    background-position: right bottom;
}

.bg-right-top {
    background-position: right top;
}

.bg-top {
    background-position: top;
}

.bg-repeat {
    background-repeat: repeat;
}

.bg-no-repeat {
    background-repeat: no-repeat;
}

.bg-repeat-x {
    background-repeat: repeat-x;
}

.bg-repeat-y {
    background-repeat: repeat-y;
}

.bg-repeat-round {
    background-repeat: round;
}

.bg-repeat-space {
    background-repeat: space;
}

.bg-auto {
    background-size: auto;
}

.bg-cover {
    background-size: cover;
}

.bg-contain {
    background-size: contain;
}


.border {
    @include modifiers($map: $colors-map, $attribute: "border-color", $prefix: "-");
    @include modifiers($map: $borders-map, $attribute: "border-width", $prefix: "-");
}

.border-t {
    @include modifiers($map: $borders-map, $attribute: "border-top-width", $prefix: "-");
}

.border-b {
    @include modifiers($map: $borders-map, $attribute: "border-bottom-width", $prefix: "-");
}

.border-l {
    @include modifiers($map: $borders-map, $attribute: "border-left-width", $prefix: "-");
}

.border-r {
    @include modifiers($map: $borders-map, $attribute: "border-right-width", $prefix: "-");
}

.group:hover .group-hover\:border {
    @include modifiers($map: $colors-map, $attribute: "border-color", $prefix: "-");
    @include modifiers($map: $borders-map, $attribute: "border-width", $prefix: "-");
}

.focus-within\:border {
    @include modifiers(
        $map: $colors-map,
        $attribute: "border-color",
        $prefix: "-",
        $suffix: ":focus-within"
    );
}

.hover\:border {
    @include modifiers($map: $colors-map, $attribute: "border-color", $prefix: "-", $suffix: ":hover");
}

.focus\:border {
    @include modifiers($map: $colors-map, $attribute: "border-color", $prefix: "-", $suffix: ":focus");
}

.border-collapse {
    border-collapse: collapse;
}

.border-separate {
    border-collapse: separate;
}

.rounded {
    @include modifiers(
        $map: $radii-map,
        $attribute: (
            "border-radius",
        ),
        $prefix: "-"
    );
}

.rounded-t {
    @include modifiers(
        $map: $radii-map,
        $attribute: (
            "border-top-left-radius",
            "border-top-right-radius",
        ),
        $prefix: "-"
    );
}
.rounded-r {
    @include modifiers(
        $map: $radii-map,
        $attribute: (
            "border-top-right-radius",
            "border-bottom-right-radius",
        ),
        $prefix: "-"
    );
}
.rounded-b {
    @include modifiers(
        $map: $radii-map,
        $attribute: (
            "border-bottom-left-radius",
            "border-bottom-right-radius",
        ),
        $prefix: "-"
    );
}
.rounded-l {
    @include modifiers(
        $map: $radii-map,
        $attribute: (
            "border-top-left-radius",
            "border-bottom-left-radius",
        ),
        $prefix: "-"
    );
}

.rounded-tl {
    @include modifiers(
        $map: $radii-map,
        $attribute: (
            "border-top-left-radius",
        ),
        $prefix: "-"
    );
}

.rounded-tr {
    @include modifiers(
        $map: $radii-map,
        $attribute: (
            "border-top-right-radius",
        ),
        $prefix: "-"
    );
}

.rounded-bl {
    @include modifiers(
        $map: $radii-map,
        $attribute: (
            "border-bottom-left-radius",
        ),
        $prefix: "-"
    );
}

.rounded-br {
    @include modifiers(
        $map: $radii-map,
        $attribute: (
            "border-bottom-right-radius",
        ),
        $prefix: "-"
    );
}

.border-solid {
    border-style: solid;
}

.border-dashed {
    border-style: dashed;
}

.border-dotted {
    border-style: dotted;
}

.border-double {
    border-style: double;
}

.border-none {
    border-style: none;
}

// box sizing styles

.box-border {
    box-sizing: border-box;
}

.box-content {
    box-sizing: content-box;
}

// cursor styles

.cursor-auto {
    cursor: auto;
}

.cursor-default {
    cursor: default;
}

.cursor-pointer {
    cursor: pointer;
}

.cursor-wait {
    cursor: wait;
}

.cursor-text {
    cursor: text;
}

.cursor-move {
    cursor: move;
}

.cursor-not-allowed {
    cursor: not-allowed;
}

// display styles

.block {
    display: block;
}

.inline-block {
    display: inline-block;
}

.inline {
    display: inline;
}

.flex {
    display: flex;
}

.inline-flex {
    display: inline-flex;
}

.table {
    display: table;
}

.table-caption {
    display: table-caption;
}

.table-cell {
    display: table-cell;
}

.table-column {
    display: table-column;
}

.table-column-group {
    display: table-column-group;
}

.table-footer-group {
    display: table-footer-group;
}

.table-header-group {
    display: table-header-group;
}

.table-row-group {
    display: table-row-group;
}

.table-row {
    display: table-row;
}

.flow-root {
    display: flow-root;
}

.grid {
    display: grid;
}

.inline-grid {
    display: inline-grid;
}

.contents {
    display: contents;
}

.hidden {
    display: none;
}

.flex-row {
    flex-direction: row;
}

.flex-row-reverse {
    flex-direction: row-reverse;
}

.flex-col {
    flex-direction: column;
}

.flex-col-reverse {
    flex-direction: column-reverse;
}

.flex-wrap {
    flex-wrap: wrap;
}

.flex-wrap-reverse {
    flex-wrap: wrap-reverse;
}

.flex-nowrap {
    flex-wrap: nowrap;
}

.place-items-auto {
    place-items: auto;
}

.place-items-start {
    place-items: start;
}

.place-items-end {
    place-items: end;
}

.place-items-center {
    place-items: center;
}

.place-items-stretch {
    place-items: stretch;
}

.place-content-center {
    place-content: center;
}

.place-content-start {
    place-content: start;
}

.place-content-end {
    place-content: end;
}

.place-content-between {
    place-content: space-between;
}

.place-content-around {
    place-content: space-around;
}

.place-content-evenly {
    place-content: space-evenly;
}

.place-content-stretch {
    place-content: stretch;
}

.place-self-auto {
    place-self: auto;
}

.place-self-start {
    place-self: start;
}

.place-self-end {
    place-self: end;
}

.place-self-center {
    place-self: center;
}

.place-self-stretch {
    place-self: stretch;
}

.items-start {
    align-items: flex-start;
}

.items-end {
    align-items: flex-end;
}

.items-center {
    align-items: center;
}

.items-baseline {
    align-items: baseline;
}

.items-stretch {
    align-items: stretch;
}

.content-center {
    align-content: center;
}

.content-start {
    align-content: flex-start;
}

.content-end {
    align-content: flex-end;
}

.content-between {
    align-content: space-between;
}

.content-around {
    align-content: space-around;
}

.content-evenly {
    align-content: space-evenly;
}

.self-auto {
    align-self: auto;
}

.self-start {
    align-self: flex-start;
}

.self-end {
    align-self: flex-end;
}

.self-center {
    align-self: center;
}

.self-stretch {
    align-self: stretch;
}

.justify-items-auto {
    justify-items: auto;
}

.justify-items-start {
    justify-items: start;
}

.justify-items-end {
    justify-items: end;
}

.justify-items-center {
    justify-items: center;
}

.justify-items-stretch {
    justify-items: stretch;
}

.justify-start {
    justify-content: flex-start;
}

.justify-end {
    justify-content: flex-end;
}

.justify-center {
    justify-content: center;
}

.justify-between {
    justify-content: space-between;
}

.justify-around {
    justify-content: space-around;
}

.justify-evenly {
    justify-content: space-evenly;
}

.justify-self-auto {
    justify-self: auto;
}

.justify-self-start {
    justify-self: start;
}

.justify-self-end {
    justify-self: end;
}

.justify-self-center {
    justify-self: center;
}

.justify-self-stretch {
    justify-self: stretch;
}

.flex-1 {
    flex: 1 1 0%;
}

.flex-auto {
    flex: 1 1 auto;
}

.flex-initial {
    flex: 0 1 auto;
}

.flex-none {
    flex: none;
}

.flex-grow-0 {
    flex-grow: 0;
}

.flex-grow {
    flex-grow: 1;
}

.flex-shrink-0 {
    flex-shrink: 0;
}

.flex-shrink {
    flex-shrink: 1;
}

.order-1 {
    order: 1;
}

.order-2 {
    order: 2;
}

.order-3 {
    order: 3;
}

.order-4 {
    order: 4;
}

.order-5 {
    order: 5;
}

.order-6 {
    order: 6;
}

.order-7 {
    order: 7;
}

.order-8 {
    order: 8;
}

.order-9 {
    order: 9;
}

.order-10 {
    order: 10;
}

.order-11 {
    order: 11;
}

.order-12 {
    order: 12;
}

.order-first {
    order: -9999;
}

.order-last {
    order: 9999;
}

.order-none {
    order: 0;
}

.float-right {
    float: right;
}

.float-left {
    float: left;
}

.float-none {
    float: none;
}

.clear-left {
    clear: left;
}

.clear-right {
    clear: right;
}

.clear-both {
    clear: both;
}

.clear-none {
    clear: none;
}

// font styles

.font-heading {
    font-family: var(--lp-fonts-heading-xs), -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";;
}

.font-body {
    font-family: var(--lp-fonts-body-1), -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";;
}

.font-thin {
    font-weight: 100;
}

.font-extralight {
    font-weight: 200;
}

.font-light {
    font-weight: 300;
}

.font-normal {
    font-weight: 400;
}

.font-medium {
    font-weight: 500;
}

.font-semibold {
    font-weight: 600;
}

.font-bold {
    font-weight: 700;
}

.font-extrabold {
    font-weight: 800;
}

.font-black {
    font-weight: 900;
}

// height styles

.h-auto {
    height: auto;
}

.h-1\/2 {
    height: 50%;
}

.h-1\/3 {
    height: 33.333333%;
}

.h-2\/3 {
    height: 66.666667%;
}

.h-1\/4 {
    height: 25%;
}

.h-2\/4 {
    height: 50%;
}

.h-3\/4 {
    height: 75%;
}

.h-1\/5 {
    height: 20%;
}

.h-2\/5 {
    height: 40%;
}

.h-3\/5 {
    height: 60%;
}

.h-4\/5 {
    height: 80%;
}

.h-1\/6 {
    height: 16.666667%;
}

.h-2\/6 {
    height: 33.333333%;
}

.h-3\/6 {
    height: 50%;
}

.h-4\/6 {
    height: 66.666667%;
}

.h-5\/6 {
    height: 83.333333%;
}

.h-full {
    height: 100%;
}

.h-screen {
    height: 100vh;
}

// list styles

.list-inside {
    list-style-position: inside;
}

.list-outside {
    list-style-position: outside;
}

.list-none {
    list-style-type: none;
}

.list-disc {
    list-style-type: disc;
}

.list-decimal {
    list-style-type: decimal;
}

// margin styles

.m {
    @include modifiers($map: $margin-map, $attribute: "margin", $prefix: "-");
}

.mx {
    @include modifiers(
        $map: $margin-map,
        $attribute: (
            "margin-left",
            "margin-right",
        ),
        $prefix: "-"
    );
}

.my {
    @include modifiers(
        $map: $margin-map,
        $attribute: (
            "margin-top",
            "margin-bottom",
        ),
        $prefix: "-"
    );
}

.mt {
    @include modifiers(
        $map: $margin-map,
        $attribute: "margin-top",
        $prefix: "-"
    );
}

.mr {
    @include modifiers(
        $map: $margin-map,
        $attribute: "margin-right",
        $prefix: "-"
    );
}

.mb {
    @include modifiers(
        $map: $margin-map,
        $attribute: "margin-bottom",
        $prefix: "-"
    );
}

.ml {
    @include modifiers(
        $map: $margin-map,
        $attribute: "margin-left",
        $prefix: "-"
    );
}

// max height styles

.max-h-0 {
    max-height: 0px;
}

.max-h-full {
    max-height: 100%;
}

.max-h-screen {
    max-height: 100vh;
}

// max width styles

.max-w-0 {
    max-width: 0rem;
}

.max-w-none {
    max-width: none;
}

.max-w-full {
    max-width: 100%;
}

.max-w-min {
    max-width: -webkit-min-content;
    max-width: -moz-min-content;
    max-width: min-content;
}

.max-w-max {
    max-width: -webkit-max-content;
    max-width: -moz-max-content;
    max-width: max-content;
}

.max-w-prose {
    max-width: 65ch;
}

.max-w {
    @include modifiers($map: $width-map, $attribute: "max-width", $prefix: "-");
}

.max-w-screen {
    @include modifiers($map: $width-map, $attribute: "max-width", $prefix: "-");
}

//min height and width

.min-h-0 {
    min-height: 0px;
}

.min-h-full {
    min-height: 100%;
}

.min-h-screen {
    min-height: 100vh;
}

.min-w-0 {
    min-width: 0px;
}

.min-w-full {
    min-width: 100%;
}

.min-w-min {
    min-width: -webkit-min-content;
    min-width: -moz-min-content;
    min-width: min-content;
}

.min-w-max {
    min-width: -webkit-max-content;
    min-width: -moz-max-content;
    min-width: max-content;
}

.min-w {
    @include modifiers($map: $width-map, $attribute: "min-width", $prefix: "-");
}

// object styles

.object-contain {
    object-fit: contain;
}

.object-cover {
    object-fit: cover;
}

.object-fill {
    object-fit: fill;
}

.object-none {
    object-fit: none;
}

.object-scale-down {
    object-fit: scale-down;
}

.object-bottom {
    object-position: bottom;
}

.object-center {
    object-position: center;
}

.object-left {
    object-position: left;
}

.object-left-bottom {
    object-position: left bottom;
}

.object-left-top {
    object-position: left top;
}

.object-right {
    object-position: right;
}

.object-right-bottom {
    object-position: right bottom;
}

.object-right-top {
    object-position: right top;
}

.object-top {
    object-position: top;
}

// opacity styles

.opacity {
    @include modifiers($map: $opacity-map, $attribute: "opacity", $prefix: "-");
}

.group:hover .group-hover\:opacity {
    @include modifiers($map: $opacity-map, $attribute: "opacity", $prefix: "-");
}

.focus-within\:opacity {
    @include modifiers(
        $map: $colors-map,
        $attribute: "opacity",
        $prefix: "-",
        $suffix: ":focus-within"
    );
}

.hover\:opacity {
    @include modifiers(
        $map: $opacity-map,
        $attribute: "opacity",
        $prefix: "-",
        $suffix: ":hover"
    );
}

.focus\:opacity {
    @include modifiers(
        $map: $opacity-map,
        $attribute: "opacity",
        $prefix: "-",
        $suffix: ":focus"
    );
}

// outline styles

.outline-none {
    outline: 2px solid transparent;
    outline-offset: 2px;
}

.focus-within\:outline-none:focus-within {
    outline: 2px solid transparent;
    outline-offset: 2px;
}

.focus\:outline-none:focus {
    outline: 2px solid transparent;
    outline-offset: 2px;
}

// overflow styles

.overflow-auto {
    overflow: auto;
}

.overflow-hidden {
    overflow: hidden;
}

.overflow-visible {
    overflow: visible;
}

.overflow-scroll {
    overflow: scroll;
}

.overflow-x-auto {
    overflow-x: auto;
}

.overflow-y-auto {
    overflow-y: auto;
}

.overflow-x-hidden {
    overflow-x: hidden;
}

.overflow-y-hidden {
    overflow-y: hidden;
}

.overflow-x-visible {
    overflow-x: visible;
}

.overflow-y-visible {
    overflow-y: visible;
}

.overflow-x-scroll {
    overflow-x: scroll;
}

.overflow-y-scroll {
    overflow-y: scroll;
}

.overscroll-auto {
    -ms-scroll-chaining: chained;
    overscroll-behavior: auto;
}

.overscroll-contain {
    -ms-scroll-chaining: none;
    overscroll-behavior: contain;
}

.overscroll-none {
    -ms-scroll-chaining: none;
    overscroll-behavior: none;
}

.overscroll-y-auto {
    overscroll-behavior-y: auto;
}

.overscroll-y-contain {
    overscroll-behavior-y: contain;
}

.overscroll-y-none {
    overscroll-behavior-y: none;
}

.overscroll-x-auto {
    overscroll-behavior-x: auto;
}

.overscroll-x-contain {
    overscroll-behavior-x: contain;
}

.overscroll-x-none {
    overscroll-behavior-x: none;
}

// padding styles

.p {
    @include modifiers($map: $padding-map, $attribute: "padding", $prefix: "-");
}

.px {
    @include modifiers(
        $map: $padding-map,
        $attribute: (
            "padding-left",
            "padding-right",
        ),
        $prefix: "-"
    );
}

.py {
    @include modifiers(
        $map: $padding-map,
        $attribute: (
            "padding-top",
            "padding-bottom",
        ),
        $prefix: "-"
    );
}

.pt {
    @include modifiers(
        $map: $padding-map,
        $attribute: (
            "padding-top",
        ),
        $prefix: "-"
    );
}

.pr {
    @include modifiers(
        $map: $padding-map,
        $attribute: (
            "padding-right",
        ),
        $prefix: "-"
    );
}

.pb {
    @include modifiers(
        $map: $padding-map,
        $attribute: (
            "padding-bottom",
        ),
        $prefix: "-"
    );
}

.pl {
    @include modifiers(
        $map: $padding-map,
        $attribute: (
            "padding-left",
        ),
        $prefix: "-"
    );
}

// inset styles

.inset {
    @include modifiers(
        $map: $position-map,
        $attribute: (
            "top",
            "right",
            "bottom",
            "left",
        ),
        $prefix: "-"
    );
}

.inset-y {
    @include modifiers(
        $map: $position-map,
        $attribute: (
            "top",
            "bottom",
        ),
        $prefix: "-"
    );
}

.inset-x {
    @include modifiers(
        $map: $position-map,
        $attribute: (
            "left",
            "right",
        ),
        $prefix: "-"
    );
}

// pointer event styles

.pointer-events-none {
    pointer-events: none;
}

.pointer-events-auto {
    pointer-events: auto;
}

//position styles

.static {
    position: static;
}

.fixed {
    position: fixed;
}

.absolute {
    position: absolute;
}

.relative {
    position: relative;
}

.sticky {
    position: -webkit-sticky;
    position: sticky;
}

.top {
    @include modifiers(
        $map: $position-map,
        $attribute: (
            "top",
        ),
        $prefix: "-"
    );
}

.right {
    @include modifiers(
        $map: $position-map,
        $attribute: (
            "right",
        ),
        $prefix: "-"
    );
}

.bottom {
    @include modifiers(
        $map: $position-map,
        $attribute: (
            "bottom",
        ),
        $prefix: "-"
    );
}

.left {
    @include modifiers(
        $map: $position-map,
        $attribute: (
            "left",
        ),
        $prefix: "-"
    );
}

// resize styles

.resize-none {
    resize: none;
}

.resize-y {
    resize: vertical;
}

.resize-x {
    resize: horizontal;
}

.resize {
    resize: both;
}

// fill and stroke styles

.fill-current {
    fill: currentColor;
}

.stroke-current {
    stroke: currentColor;
}

.stroke-0 {
    stroke-width: 0;
}

.stroke-1 {
    stroke-width: 1;
}

.stroke-2 {
    stroke-width: 2;
}

// table layout styles

.table-auto {
    table-layout: auto;
}

.table-fixed {
    table-layout: fixed;
}

// text styles

.text {
    @include modifiers($map: $colors-map, $attribute: "color", $prefix: "-");
    @include modifiers(
        $map: $font-sizes-map,
        $attribute: "font-size",
        $prefix: "-"
    );
}

.group:hover .group-hover\:text {
    @include modifiers($map: $colors-map, $attribute: "color", $prefix: "-");
}

.focus-within\:text {
    @include modifiers(
        $map: $colors-map,
        $attribute: "color",
        $prefix: "-",
        $suffix: ":focus-within"
    );
}

.hover\:text {
    @include modifiers(
        $map: $colors-map,
        $attribute: "color",
        $prefix: "-",
        $suffix: ":hover"
    );
}

.focus\:text {
    @include modifiers(
        $map: $colors-map,
        $attribute: "color",
        $prefix: "-",
        $suffix: ":focus"
    );
}

.text-left {
    text-align: left;
}

.text-center {
    text-align: center;
}

.text-right {
    text-align: right;
}

.text-justify {
    text-align: justify;
}

.leading {
    @include modifiers($map: $leading-map, $attribute: "line-height", $prefix: "-");
}

.truncate {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

.overflow-ellipsis {
    text-overflow: ellipsis;
}

.overflow-clip {
    text-overflow: clip;
}

.italic {
    font-style: italic;
}

.not-italic {
    font-style: normal;
}

.uppercase {
    text-transform: uppercase;
}

.lowercase {
    text-transform: lowercase;
}

.capitalize {
    text-transform: capitalize;
}

.normal-case {
    text-transform: none;
}

.underline {
    text-decoration: underline;
}

.line-through {
    text-decoration: line-through;
}

.no-underline {
    text-decoration: none;
}

.group:hover .group-hover\:underline {
    text-decoration: underline;
}

.group:hover .group-hover\:line-through {
    text-decoration: line-through;
}

.group:hover .group-hover\:no-underline {
    text-decoration: none;
}

.focus-within\:underline:focus-within {
    text-decoration: underline;
}

.focus-within\:line-through:focus-within {
    text-decoration: line-through;
}

.focus-within\:no-underline:focus-within {
    text-decoration: none;
}

.hover\:underline:hover {
    text-decoration: underline;
}

.hover\:line-through:hover {
    text-decoration: line-through;
}

.hover\:no-underline:hover {
    text-decoration: none;
}

.focus\:underline:focus {
    text-decoration: underline;
}

.focus\:line-through:focus {
    text-decoration: line-through;
}

.focus\:no-underline:focus {
    text-decoration: none;
}

.antialiased {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}

.subpixel-antialiased {
    -webkit-font-smoothing: auto;
    -moz-osx-font-smoothing: auto;
}

.tracking {
    @include modifiers($map: $tracking-map, $attribute: "letter-spacing", $prefix: "-");
}

.select-none {
    -webkit-user-select: none;
    -ms-user-select: none;
    user-select: none;
}

.select-text {
    -webkit-user-select: text;
    -ms-user-select: text;
    user-select: text;
}

.select-all {
    -webkit-user-select: all;
    -ms-user-select: all;
    user-select: all;
}

.select-auto {
    -webkit-user-select: auto;
    -ms-user-select: auto;
    user-select: auto;
}

.align-baseline {
    vertical-align: baseline;
}

.align-top {
    vertical-align: top;
}

.align-middle {
    vertical-align: middle;
}

.align-bottom {
    vertical-align: bottom;
}

.align-text-top {
    vertical-align: text-top;
}

.align-text-bottom {
    vertical-align: text-bottom;
}

.whitespace-normal {
    white-space: normal;
}

.whitespace-nowrap {
    white-space: nowrap;
}

.whitespace-pre {
    white-space: pre;
}

.whitespace-pre-line {
    white-space: pre-line;
}

.whitespace-pre-wrap {
    white-space: pre-wrap;
}

.break-normal {
    overflow-wrap: normal;
    word-break: normal;
}

.break-words {
    overflow-wrap: break-word;
}

.break-all {
    word-break: break-all;
}

// variant numeric styles

.ordinal,
.slashed-zero,
.lining-nums,
.oldstyle-nums,
.proportional-nums,
.tabular-nums,
.diagonal-fractions,
.stacked-fractions {
    --lp-ordinal: var(--lp-empty, /*!*/ /*!*/);
    --lp-slashed-zero: var(--lp-empty, /*!*/ /*!*/);
    --lp-numeric-figure: var(--lp-empty, /*!*/ /*!*/);
    --lp-numeric-spacing: var(--lp-empty, /*!*/ /*!*/);
    --lp-numeric-fraction: var(--lp-empty, /*!*/ /*!*/);
    font-variant-numeric: var(--lp-ordinal) var(--lp-slashed-zero)
        var(--lp-numeric-figure) var(--lp-numeric-spacing)
        var(--lp-numeric-fraction);
}

.normal-nums {
    font-variant-numeric: normal;
}

.ordinal {
    --lp-ordinal: ordinal;
}

.slashed-zero {
    --lp-slashed-zero: slashed-zero;
}

.lining-nums {
    --lp-numeric-figure: lining-nums;
}

.oldstyle-nums {
    --lp-numeric-figure: oldstyle-nums;
}

.proportional-nums {
    --lp-numeric-spacing: proportional-nums;
}

.tabular-nums {
    --lp-numeric-spacing: tabular-nums;
}

.diagonal-fractions {
    --lp-numeric-fraction: diagonal-fractions;
}

.stacked-fractions {
    --lp-numeric-fraction: stacked-fractions;
}

// Placeholder styles

.placeholder {
    @include modifiers(
        $map: $colors-map,
        $attribute: "color",
        $prefix: "-",
        $suffix: "::placeholder"
    );
    @include modifiers(
        $map: $colors-map,
        $attribute: "color",
        $prefix: "-",
        $suffix: "::-webkit-input-placeholder"
    );
    @include modifiers(
        $map: $colors-map,
        $attribute: "color",
        $prefix: "-",
        $suffix: ":-ms-input-placeholder"
    );
    @include modifiers(
        $map: $colors-map,
        $attribute: "color",
        $prefix: "-",
        $suffix: "::-ms-input-placeholder"
    );
}

.focus\:placeholder {
    @include modifiers(
        $map: $colors-map,
        $attribute: "color",
        $prefix: "-",
        $suffix: ":focus::placeholder"
    );
    @include modifiers(
        $map: $colors-map,
        $attribute: "color",
        $prefix: "-",
        $suffix: ":focus::-webkit-input-placeholder"
    );
    @include modifiers(
        $map: $colors-map,
        $attribute: "color",
        $prefix: "-",
        $suffix: ":focus:-ms-input-placeholder"
    );
    @include modifiers(
        $map: $colors-map,
        $attribute: "color",
        $prefix: "-",
        $suffix: ":focus::-ms-input-placeholder"
    );
}

// visibility styles

.visible {
    visibility: visible;
}

.invisible {
    visibility: hidden;
}

// width styles

.w-0 {
    width: 0px;
}

.w-auto {
    width: auto;
}

.w-px {
    width: 1px;
}

.w-1\/2 {
    width: 50%;
}

.w-1\/3 {
    width: 33.333333%;
}

.w-2\/3 {
    width: 66.666667%;
}

.w-1\/4 {
    width: 25%;
}

.w-2\/4 {
    width: 50%;
}

.w-3\/4 {
    width: 75%;
}

.w-1\/5 {
    width: 20%;
}

.w-2\/5 {
    width: 40%;
}

.w-3\/5 {
    width: 60%;
}

.w-4\/5 {
    width: 80%;
}

.w-1\/6 {
    width: 16.666667%;
}

.w-2\/6 {
    width: 33.333333%;
}

.w-3\/6 {
    width: 50%;
}

.w-4\/6 {
    width: 66.666667%;
}

.w-5\/6 {
    width: 83.333333%;
}

.w-1\/12 {
    width: 8.333333%;
}

.w-2\/12 {
    width: 16.666667%;
}

.w-3\/12 {
    width: 25%;
}

.w-4\/12 {
    width: 33.333333%;
}

.w-5\/12 {
    width: 41.666667%;
}

.w-6\/12 {
    width: 50%;
}

.w-7\/12 {
    width: 58.333333%;
}

.w-8\/12 {
    width: 66.666667%;
}

.w-9\/12 {
    width: 75%;
}

.w-10\/12 {
    width: 83.333333%;
}

.w-11\/12 {
    width: 91.666667%;
}

.w-full {
    width: 100%;
}

.w-screen {
    width: 100vw;
}

.w-min {
    width: -webkit-min-content;
    width: -moz-min-content;
    width: min-content;
}

.w-max {
    width: -webkit-max-content;
    width: -moz-max-content;
    width: max-content;
}

.w {
    @include modifiers($map: $width-map, $attribute: "width", $prefix: "-");
}

// z-index styles

.z {
    @include modifiers($map: $z-index-map, $attribute: "z-index", $prefix: "-");
}

.focus-within\:z {
    @include modifiers(
        $map: $z-index-map,
        $attribute: "z-index",
        $prefix: "-",
        $suffix: ":focus-within"
    );
}

.focus\:z {
    @include modifiers(
        $map: $z-index-map,
        $attribute: "z-index",
        $prefix: "-",
        $suffix: ":focus"
    );
}

// gap styles

.gap {
    @include modifiers($map: $padding-map, $attribute: "gap", $prefix: "-");
}

.gap-x {
    @include modifiers($map: $padding-map, $attribute: (
        "-webkit-column-gap",
        "column-gap",
    ), $prefix: "-");
}

.gap-y {
    @include modifiers($map: $padding-map, $attribute: "row-gap", $prefix: "-");
}

// grid styles

.grid-flow-row {
    grid-auto-flow: row;
}

.grid-flow-col {
    grid-auto-flow: column;
}

.grid-flow-row-dense {
    grid-auto-flow: row dense;
}

.grid-flow-col-dense {
    grid-auto-flow: column dense;
}

.grid-cols-1 {
    grid-template-columns: repeat(1, minmax(0, 1fr));
}

.grid-cols-2 {
    grid-template-columns: repeat(2, minmax(0, 1fr));
}

.grid-cols-3 {
    grid-template-columns: repeat(3, minmax(0, 1fr));
}

.grid-cols-4 {
    grid-template-columns: repeat(4, minmax(0, 1fr));
}

.grid-cols-5 {
    grid-template-columns: repeat(5, minmax(0, 1fr));
}

.grid-cols-6 {
    grid-template-columns: repeat(6, minmax(0, 1fr));
}

.grid-cols-7 {
    grid-template-columns: repeat(7, minmax(0, 1fr));
}

.grid-cols-8 {
    grid-template-columns: repeat(8, minmax(0, 1fr));
}

.grid-cols-9 {
    grid-template-columns: repeat(9, minmax(0, 1fr));
}

.grid-cols-10 {
    grid-template-columns: repeat(10, minmax(0, 1fr));
}

.grid-cols-11 {
    grid-template-columns: repeat(11, minmax(0, 1fr));
}

.grid-cols-12 {
    grid-template-columns: repeat(12, minmax(0, 1fr));
}

.grid-cols-none {
    grid-template-columns: none;
}

.auto-cols-auto {
    grid-auto-columns: auto;
}

.auto-cols-min {
    grid-auto-columns: -webkit-min-content;
    grid-auto-columns: min-content;
}

.auto-cols-max {
    grid-auto-columns: -webkit-max-content;
    grid-auto-columns: max-content;
}

.auto-cols-fr {
    grid-auto-columns: minmax(0, 1fr);
}

.col-auto {
    grid-column: auto;
}

.col-span-1 {
    grid-column: span 1 / span 1;
}

.col-span-2 {
    grid-column: span 2 / span 2;
}

.col-span-3 {
    grid-column: span 3 / span 3;
}

.col-span-4 {
    grid-column: span 4 / span 4;
}

.col-span-5 {
    grid-column: span 5 / span 5;
}

.col-span-6 {
    grid-column: span 6 / span 6;
}

.col-span-7 {
    grid-column: span 7 / span 7;
}

.col-span-8 {
    grid-column: span 8 / span 8;
}

.col-span-9 {
    grid-column: span 9 / span 9;
}

.col-span-10 {
    grid-column: span 10 / span 10;
}

.col-span-11 {
    grid-column: span 11 / span 11;
}

.col-span-12 {
    grid-column: span 12 / span 12;
}

.col-span-full {
    grid-column: 1 / -1;
}

.col-start-1 {
    grid-column-start: 1;
}

.col-start-2 {
    grid-column-start: 2;
}

.col-start-3 {
    grid-column-start: 3;
}

.col-start-4 {
    grid-column-start: 4;
}

.col-start-5 {
    grid-column-start: 5;
}

.col-start-6 {
    grid-column-start: 6;
}

.col-start-7 {
    grid-column-start: 7;
}

.col-start-8 {
    grid-column-start: 8;
}

.col-start-9 {
    grid-column-start: 9;
}

.col-start-10 {
    grid-column-start: 10;
}

.col-start-11 {
    grid-column-start: 11;
}

.col-start-12 {
    grid-column-start: 12;
}

.col-start-13 {
    grid-column-start: 13;
}

.col-start-auto {
    grid-column-start: auto;
}

.col-end-1 {
    grid-column-end: 1;
}

.col-end-2 {
    grid-column-end: 2;
}

.col-end-3 {
    grid-column-end: 3;
}

.col-end-4 {
    grid-column-end: 4;
}

.col-end-5 {
    grid-column-end: 5;
}

.col-end-6 {
    grid-column-end: 6;
}

.col-end-7 {
    grid-column-end: 7;
}

.col-end-8 {
    grid-column-end: 8;
}

.col-end-9 {
    grid-column-end: 9;
}

.col-end-10 {
    grid-column-end: 10;
}

.col-end-11 {
    grid-column-end: 11;
}

.col-end-12 {
    grid-column-end: 12;
}

.col-end-13 {
    grid-column-end: 13;
}

.col-end-auto {
    grid-column-end: auto;
}

.grid-rows-1 {
    grid-template-rows: repeat(1, minmax(0, 1fr));
}

.grid-rows-2 {
    grid-template-rows: repeat(2, minmax(0, 1fr));
}

.grid-rows-3 {
    grid-template-rows: repeat(3, minmax(0, 1fr));
}

.grid-rows-4 {
    grid-template-rows: repeat(4, minmax(0, 1fr));
}

.grid-rows-5 {
    grid-template-rows: repeat(5, minmax(0, 1fr));
}

.grid-rows-6 {
    grid-template-rows: repeat(6, minmax(0, 1fr));
}

.grid-rows-none {
    grid-template-rows: none;
}

.auto-rows-auto {
    grid-auto-rows: auto;
}

.auto-rows-min {
    grid-auto-rows: -webkit-min-content;
    grid-auto-rows: min-content;
}

.auto-rows-max {
    grid-auto-rows: -webkit-max-content;
    grid-auto-rows: max-content;
}

.auto-rows-fr {
    grid-auto-rows: minmax(0, 1fr);
}

.row-auto {
    grid-row: auto;
}

.row-span-1 {
    grid-row: span 1 / span 1;
}

.row-span-2 {
    grid-row: span 2 / span 2;
}

.row-span-3 {
    grid-row: span 3 / span 3;
}

.row-span-4 {
    grid-row: span 4 / span 4;
}

.row-span-5 {
    grid-row: span 5 / span 5;
}

.row-span-6 {
    grid-row: span 6 / span 6;
}

.row-span-full {
    grid-row: 1 / -1;
}

.row-start-1 {
    grid-row-start: 1;
}

.row-start-2 {
    grid-row-start: 2;
}

.row-start-3 {
    grid-row-start: 3;
}

.row-start-4 {
    grid-row-start: 4;
}

.row-start-5 {
    grid-row-start: 5;
}

.row-start-6 {
    grid-row-start: 6;
}

.row-start-7 {
    grid-row-start: 7;
}

.row-start-auto {
    grid-row-start: auto;
}

.row-end-1 {
    grid-row-end: 1;
}

.row-end-2 {
    grid-row-end: 2;
}

.row-end-3 {
    grid-row-end: 3;
}

.row-end-4 {
    grid-row-end: 4;
}

.row-end-5 {
    grid-row-end: 5;
}

.row-end-6 {
    grid-row-end: 6;
}

.row-end-7 {
    grid-row-end: 7;
}

.row-end-auto {
    grid-row-end: auto;
}


// Shadow styles

.shadow {
    @include modifiers($map: $shadow-map, $attribute: "box-shadow", $prefix: "-");
}

.group:hover .group-hover\:shadow {
    @include modifiers($map: $shadow-map, $attribute: "box-shadow", $prefix: "-");
}

.focus-within\:shadow {
    @include modifiers(
        $map: $shadow-map,
        $attribute: "box-shadow",
        $prefix: "-",
        $suffix: ":focus-within"
    );
}

.hover\:shadow {
    @include modifiers(
        $map: $shadow-map,
        $attribute: "box-shadow",
        $prefix: "-",
        $suffix: ":hover"
    );
}

.focus\:shadow {
    @include modifiers(
        $map: $shadow-map,
        $attribute: "box-shadow",
        $prefix: "-",
        $suffix: ":focus"
    );
}

// Ring styles

* {
    --lp-ring-inset: var(--lp-empty, /*!*/ /*!*/);
    --lp-ring-offset-width: 0px;
    --lp-ring-offset-color: #fff;
    --lp-ring-color: rgba(59, 130, 246, 0.5);
    --lp-ring-offset-shadow: 0 0 #0000;
    --lp-ring-shadow: 0 0 #0000;
}


.ring-0 {
    --lp-ring-offset-shadow: var(--lp-ring-inset) 0 0 0
        var(--lp-ring-offset-width) var(--lp-ring-offset-color);
    --lp-ring-shadow: var(--lp-ring-inset) 0 0 0
        calc(0px + var(--lp-ring-offset-width)) var(--lp-ring-color);
    box-shadow: var(--lp-ring-offset-shadow), var(--lp-ring-shadow),
        var(--lp-shadow, 0 0 #0000);
}

.ring-1 {
    --lp-ring-offset-shadow: var(--lp-ring-inset) 0 0 0
        var(--lp-ring-offset-width) var(--lp-ring-offset-color);
    --lp-ring-shadow: var(--lp-ring-inset) 0 0 0
        calc(1px + var(--lp-ring-offset-width)) var(--lp-ring-color);
    box-shadow: var(--lp-ring-offset-shadow), var(--lp-ring-shadow),
        var(--lp-shadow, 0 0 #0000);
}

.ring-2 {
    --lp-ring-offset-shadow: var(--lp-ring-inset) 0 0 0
        var(--lp-ring-offset-width) var(--lp-ring-offset-color);
    --lp-ring-shadow: var(--lp-ring-inset) 0 0 0
        calc(2px + var(--lp-ring-offset-width)) var(--lp-ring-color);
    box-shadow: var(--lp-ring-offset-shadow), var(--lp-ring-shadow),
        var(--lp-shadow, 0 0 #0000);
}

.ring-4 {
    --lp-ring-offset-shadow: var(--lp-ring-inset) 0 0 0
        var(--lp-ring-offset-width) var(--lp-ring-offset-color);
    --lp-ring-shadow: var(--lp-ring-inset) 0 0 0
        calc(4px + var(--lp-ring-offset-width)) var(--lp-ring-color);
    box-shadow: var(--lp-ring-offset-shadow), var(--lp-ring-shadow),
        var(--lp-shadow, 0 0 #0000);
}

.ring-8 {
    --lp-ring-offset-shadow: var(--lp-ring-inset) 0 0 0
        var(--lp-ring-offset-width) var(--lp-ring-offset-color);
    --lp-ring-shadow: var(--lp-ring-inset) 0 0 0
        calc(8px + var(--lp-ring-offset-width)) var(--lp-ring-color);
    box-shadow: var(--lp-ring-offset-shadow), var(--lp-ring-shadow),
        var(--lp-shadow, 0 0 #0000);
}

.ring-inset {
    --lp-ring-inset: inset;
}

.focus-within\:ring-0:focus-within {
    --lp-ring-offset-shadow: var(--lp-ring-inset) 0 0 0
        var(--lp-ring-offset-width) var(--lp-ring-offset-color);
    --lp-ring-shadow: var(--lp-ring-inset) 0 0 0
        calc(0px + var(--lp-ring-offset-width)) var(--lp-ring-color);
    box-shadow: var(--lp-ring-offset-shadow), var(--lp-ring-shadow),
        var(--lp-shadow, 0 0 #0000);
}

.focus-within\:ring-1:focus-within {
    --lp-ring-offset-shadow: var(--lp-ring-inset) 0 0 0
        var(--lp-ring-offset-width) var(--lp-ring-offset-color);
    --lp-ring-shadow: var(--lp-ring-inset) 0 0 0
        calc(1px + var(--lp-ring-offset-width)) var(--lp-ring-color);
    box-shadow: var(--lp-ring-offset-shadow), var(--lp-ring-shadow),
        var(--lp-shadow, 0 0 #0000);
}

.focus-within\:ring-2:focus-within {
    --lp-ring-offset-shadow: var(--lp-ring-inset) 0 0 0
        var(--lp-ring-offset-width) var(--lp-ring-offset-color);
    --lp-ring-shadow: var(--lp-ring-inset) 0 0 0
        calc(2px + var(--lp-ring-offset-width)) var(--lp-ring-color);
    box-shadow: var(--lp-ring-offset-shadow), var(--lp-ring-shadow),
        var(--lp-shadow, 0 0 #0000);
}

.focus-within\:ring-4:focus-within {
    --lp-ring-offset-shadow: var(--lp-ring-inset) 0 0 0
        var(--lp-ring-offset-width) var(--lp-ring-offset-color);
    --lp-ring-shadow: var(--lp-ring-inset) 0 0 0
        calc(4px + var(--lp-ring-offset-width)) var(--lp-ring-color);
    box-shadow: var(--lp-ring-offset-shadow), var(--lp-ring-shadow),
        var(--lp-shadow, 0 0 #0000);
}

.focus-within\:ring-8:focus-within {
    --lp-ring-offset-shadow: var(--lp-ring-inset) 0 0 0
        var(--lp-ring-offset-width) var(--lp-ring-offset-color);
    --lp-ring-shadow: var(--lp-ring-inset) 0 0 0
        calc(8px + var(--lp-ring-offset-width)) var(--lp-ring-color);
    box-shadow: var(--lp-ring-offset-shadow), var(--lp-ring-shadow),
        var(--lp-shadow, 0 0 #0000);
}

.focus-within\:ring-inset:focus-within {
    --lp-ring-inset: inset;
}

.focus\:ring-0:focus {
    --lp-ring-offset-shadow: var(--lp-ring-inset) 0 0 0
        var(--lp-ring-offset-width) var(--lp-ring-offset-color);
    --lp-ring-shadow: var(--lp-ring-inset) 0 0 0
        calc(0px + var(--lp-ring-offset-width)) var(--lp-ring-color);
    box-shadow: var(--lp-ring-offset-shadow), var(--lp-ring-shadow),
        var(--lp-shadow, 0 0 #0000);
}

.focus\:ring-1:focus {
    --lp-ring-offset-shadow: var(--lp-ring-inset) 0 0 0
        var(--lp-ring-offset-width) var(--lp-ring-offset-color);
    --lp-ring-shadow: var(--lp-ring-inset) 0 0 0
        calc(1px + var(--lp-ring-offset-width)) var(--lp-ring-color);
    box-shadow: var(--lp-ring-offset-shadow), var(--lp-ring-shadow),
        var(--lp-shadow, 0 0 #0000);
}

.focus\:ring-2:focus {
    --lp-ring-offset-shadow: var(--lp-ring-inset) 0 0 0
        var(--lp-ring-offset-width) var(--lp-ring-offset-color);
    --lp-ring-shadow: var(--lp-ring-inset) 0 0 0
        calc(2px + var(--lp-ring-offset-width)) var(--lp-ring-color);
    box-shadow: var(--lp-ring-offset-shadow), var(--lp-ring-shadow),
        var(--lp-shadow, 0 0 #0000);
}

.focus\:ring-4:focus {
    --lp-ring-offset-shadow: var(--lp-ring-inset) 0 0 0
        var(--lp-ring-offset-width) var(--lp-ring-offset-color);
    --lp-ring-shadow: var(--lp-ring-inset) 0 0 0
        calc(4px + var(--lp-ring-offset-width)) var(--lp-ring-color);
    box-shadow: var(--lp-ring-offset-shadow), var(--lp-ring-shadow),
        var(--lp-shadow, 0 0 #0000);
}

.focus\:ring-8:focus {
    --lp-ring-offset-shadow: var(--lp-ring-inset) 0 0 0
        var(--lp-ring-offset-width) var(--lp-ring-offset-color);
    --lp-ring-shadow: var(--lp-ring-inset) 0 0 0
        calc(8px + var(--lp-ring-offset-width)) var(--lp-ring-color);
    box-shadow: var(--lp-ring-offset-shadow), var(--lp-ring-shadow),
        var(--lp-shadow, 0 0 #0000);
}

.focus\:ring-inset:focus {
    --lp-ring-inset: inset;
}

.ring-offset {
    @include modifiers($map: $colors-map, $attribute: "--lp-ring-offset-color", $prefix: "-");
    @include modifiers($map: $ring-map, $attribute: "--lp-ring-offset-width", $prefix: "-");
}

.focus-within\:ring-offset {
    @include modifiers(
        $map: $colors-map,
        $attribute: "--lp-ring-offset-color",
        $prefix: "-",
        $suffix: ":focus-within"
    );
    @include modifiers(
        $map: $ring-map,
        $attribute: "--lp-ring-offset-width",
        $prefix: "-",
        $suffix: ":focus-within"
    );
}

.focus\:ring-offset {
    @include modifiers(
        $map: $colors-map,
        $attribute: "--lp-ring-offset-color",
        $prefix: "-",
        $suffix: ":focus"
    );
    @include modifiers(
        $map: $ring-map,
        $attribute: "--lp-ring-offset-width",
        $prefix: "-",
        $suffix: ":focus"
    );
}

.ring {
    @include modifiers($map: $colors-map, $attribute: "--lp-ring-color", $prefix: "-");
}

.focus-within\:ring {
    @include modifiers(
        $map: $colors-map,
        $attribute: "--lp-ring-color",
        $prefix: "-",
        $suffix: ":focus-within"
    );
}

.focus\:ring {
    @include modifiers(
        $map: $colors-map,
        $attribute: "--lp-ring-color",
        $prefix: "-",
        $suffix: ":focus"
    );
}

// transform styles

.transform-none {
    transform: none;
}

.origin-center {
    transform-origin: center;
}

.origin-top {
    transform-origin: top;
}

.origin-top-right {
    transform-origin: top right;
}

.origin-right {
    transform-origin: right;
}

.origin-bottom-right {
    transform-origin: bottom right;
}

.origin-bottom {
    transform-origin: bottom;
}

.origin-bottom-left {
    transform-origin: bottom left;
}

.origin-left {
    transform-origin: left;
}

.origin-top-left {
    transform-origin: top left;
}

.transform {
    --lp-translate-x: 0;
    --lp-translate-y: 0;
    --lp-rotate: 0;
    --lp-skew-x: 0;
    --lp-skew-y: 0;
    --lp-scale-x: 1;
    --lp-scale-y: 1;
    transform: translateX(var(--lp-translate-x))
        translateY(var(--lp-translate-y)) rotate(var(--lp-rotate))
        skewX(var(--lp-skew-x)) skewY(var(--lp-skew-y))
        scaleX(var(--lp-scale-x)) scaleY(var(--lp-scale-y));
}

.transform-gpu {
    --lp-translate-x: 0;
    --lp-translate-y: 0;
    --lp-rotate: 0;
    --lp-skew-x: 0;
    --lp-skew-y: 0;
    --lp-scale-x: 1;
    --lp-scale-y: 1;
    transform: translate3d(var(--lp-translate-x), var(--lp-translate-y), 0)
        rotate(var(--lp-rotate)) skewX(var(--lp-skew-x)) skewY(var(--lp-skew-y))
        scaleX(var(--lp-scale-x)) scaleY(var(--lp-scale-y));
}

.will-change {
    will-change: transform;
  }


.scale {
    @include modifiers($map: $scale-map, $attribute: ("--lp-scale-x", "--lp-scale-y"), $prefix: "-");
}

.hover\:scale {
    @include modifiers(
        $map: $scale-map,
        $attribute: ("--lp-scale-x", "--lp-scale-y"),
        $prefix: "-",
        $suffix: ":hover"
    );
}

.focus\:scale {
    @include modifiers(
        $map: $scale-map,
        $attribute: ("--lp-scale-x", "--lp-scale-y"),
        $prefix: "-",
        $suffix: ":focus"
    );
}

.scale-x {
    @include modifiers($map: $scale-map, $attribute: "--lp-scale-x", $prefix: "-");
}

.hover\:scale-x {
    @include modifiers(
        $map: $scale-map,
        $attribute: "--lp-scale-x",
        $prefix: "-",
        $suffix: ":hover"
    );
}

.focus\:scale-x {
    @include modifiers(
        $map: $scale-map,
        $attribute: "--lp-scale-x",
        $prefix: "-",
        $suffix: ":focus"
    );
}

.scale-y {
    @include modifiers($map: $scale-map, $attribute: "--lp-scale-y", $prefix: "-");
}

.hover\:scale-y {
    @include modifiers(
        $map: $scale-map,
        $attribute: "--lp-scale-y",
        $prefix: "-",
        $suffix: ":hover"
    );
}

.focus\:scale-y {
    @include modifiers(
        $map: $scale-map,
        $attribute: "--lp-scale-y",
        $prefix: "-",
        $suffix: ":focus"
    );
}

.rotate {
    @include modifiers($map: $rotate-map, $attribute: "--lp-rotate", $prefix: "-");
}

.hover\:rotate {
    @include modifiers(
        $map: $rotate-map,
        $attribute: "--lp-rotate",
        $prefix: "-",
        $suffix: ":hover"
    );
}

.focus\:rotate {
    @include modifiers(
        $map: $rotate-map,
        $attribute: "--lp-rotate",
        $prefix: "-",
        $suffix: ":focus"
    );
}

.skew-x {
    @include modifiers($map: $rotate-map, $attribute: "--lp-skew-x", $prefix: "-");
}

.hover\:skew-x {
    @include modifiers(
        $map: $rotate-map,
        $attribute: "--lp-skew-x",
        $prefix: "-",
        $suffix: ":hover"
    );
}

.focus\:skew-x {
    @include modifiers(
        $map: $rotate-map,
        $attribute: "--lp-skew-x",
        $prefix: "-",
        $suffix: ":focus"
    );
}

.skew-y {
    @include modifiers($map: $rotate-map, $attribute: "--lp-skew-y", $prefix: "-");
}

.hover\:skew-y {
    @include modifiers(
        $map: $rotate-map,
        $attribute: "--lp-skew-y",
        $prefix: "-",
        $suffix: ":hover"
    );
}

.focus\:skew-y {
    @include modifiers(
        $map: $rotate-map,
        $attribute: "--lp-skew-y",
        $prefix: "-",
        $suffix: ":focus"
    );
}

.translate-x {
    @include modifiers($map: $position-map, $attribute: "--lp-translate-x", $prefix: "-");
}

.hover\:translate-x {
    @include modifiers(
        $map: $position-map,
        $attribute: "--lp-translate-x",
        $prefix: "-",
        $suffix: ":hover"
    );
}

.focus\:translate-x {
    @include modifiers(
        $map: $position-map,
        $attribute: "--lp-translate-x",
        $prefix: "-",
        $suffix: ":focus"
    );
}

.translate-y {
    @include modifiers($map: $position-map, $attribute: "--lp-translate-y", $prefix: "-");
}

.hover\:translate-y {
    @include modifiers(
        $map: $position-map,
        $attribute: "--lp-translate-y",
        $prefix: "-",
        $suffix: ":hover"
    );
}

.focus\:translate-y {
    @include modifiers(
        $map: $position-map,
        $attribute: "--lp-translate-y",
        $prefix: "-",
        $suffix: ":focus"
    );
}



// transition styles

.transition-none {
    transition-property: none;
}

.transition-all {
    transition-property: all;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 150ms;
}

.transition {
    transition-property: background-color, border-color, color, fill, stroke,
        opacity, box-shadow, transform;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 150ms;
}

.transition-colors {
    transition-property: background-color, border-color, color, fill, stroke;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 150ms;
}

.transition-opacity {
    transition-property: opacity;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 150ms;
}

.transition-shadow {
    transition-property: box-shadow;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 150ms;
}

.transition-transform {
    transition-property: transform;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 150ms;
}

.ease-linear {
    transition-timing-function: linear;
}

.ease-in {
    transition-timing-function: cubic-bezier(0.4, 0, 1, 1);
}

.ease-out {
    transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
}

.ease-in-out {
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
}

.duration-75 {
    transition-duration: 75ms;
}

.duration-100 {
    transition-duration: 100ms;
}

.duration-150 {
    transition-duration: 150ms;
}

.duration-200 {
    transition-duration: 200ms;
}

.duration-300 {
    transition-duration: 300ms;
}

.duration-500 {
    transition-duration: 500ms;
}

.duration-700 {
    transition-duration: 700ms;
}

.duration-1000 {
    transition-duration: 1000ms;
}

.delay-75 {
    transition-delay: 75ms;
}

.delay-100 {
    transition-delay: 100ms;
}

.delay-150 {
    transition-delay: 150ms;
}

.delay-200 {
    transition-delay: 200ms;
}

.delay-300 {
    transition-delay: 300ms;
}

.delay-500 {
    transition-delay: 500ms;
}

.delay-700 {
    transition-delay: 700ms;
}

.delay-1000 {
    transition-delay: 1000ms;
}

@keyframes spin {
    to {
        transform: rotate(360deg);
    }
}

@keyframes ping {
    75%,
    100% {
        transform: scale(2);
        opacity: 0;
    }
}

@keyframes pulse {
    50% {
        opacity: 0.5;
    }
}

@keyframes bounce {
    0%,
    100% {
        transform: translateY(-25%);
        animation-timing-function: cubic-bezier(0.8, 0, 1, 1);
    }

    50% {
        transform: none;
        animation-timing-function: cubic-bezier(0, 0, 0.2, 1);
    }
}

// animation styles

.animate-none {
    animation: none;
}

.animate-spin {
    animation: spin 1s linear infinite;
}

.animate-ping {
    animation: ping 1s cubic-bezier(0, 0, 0.2, 1) infinite;
}

.animate-pulse {
    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
}

.animate-bounce {
    animation: bounce 1s infinite;
}

// sm styles

@media (min-width: 640px) {
    .sm\:container {
        width: 100%;
    }

    @media (min-width: 640px) {
        .sm\:container {
            max-width: 640px;
        }
    }

    @media (min-width: 768px) {
        .sm\:container {
            max-width: 768px;
        }
    }

    @media (min-width: 1024px) {
        .sm\:container {
            max-width: 1024px;
        }
    }

    @media (min-width: 1280px) {
        .sm\:container {
            max-width: 1280px;
        }
    }

    @media (min-width: 1536px) {
        .sm\:container {
            max-width: 1536px;
        }
    }
    .sm\:p {
        @include modifiers(
            $map: $padding-map,
            $attribute: "padding",
            $prefix: "-"
        );
    }

    .sm\:px {
        @include modifiers(
            $map: $padding-map,
            $attribute: (
                "padding-left",
                "padding-right",
            ),
            $prefix: "-"
        );
    }

    .sm\:py {
        @include modifiers(
            $map: $padding-map,
            $attribute: (
                "padding-top",
                "padding-bottom",
            ),
            $prefix: "-"
        );
    }

    .sm\:pt {
        @include modifiers(
            $map: $padding-map,
            $attribute: (
                "padding-top",
            ),
            $prefix: "-"
        );
    }

    .sm\:pr {
        @include modifiers(
            $map: $padding-map,
            $attribute: (
                "padding-right",
            ),
            $prefix: "-"
        );
    }

    .sm\:pb {
        @include modifiers(
            $map: $padding-map,
            $attribute: (
                "padding-bottom",
            ),
            $prefix: "-"
        );
    }

    .sm\:pl {
        @include modifiers(
            $map: $padding-map,
            $attribute: (
                "padding-left",
            ),
            $prefix: "-"
        );
    }
}

// md styles

@media (min-width: 768px) {
    .md\:container {
        width: 100%;
    }

    @media (min-width: 640px) {
        .md\:container {
            max-width: 640px;
        }
    }

    @media (min-width: 768px) {
        .md\:container {
            max-width: 768px;
        }
    }

    @media (min-width: 1024px) {
        .md\:container {
            max-width: 1024px;
        }
    }

    @media (min-width: 1280px) {
        .md\:container {
            max-width: 1280px;
        }
    }

    @media (min-width: 1536px) {
        .md\:container {
            max-width: 1536px;
        }
    }
    .md\:p {
        @include modifiers(
            $map: $padding-map,
            $attribute: "padding",
            $prefix: "-"
        );
    }

    .md\:px {
        @include modifiers(
            $map: $padding-map,
            $attribute: (
                "padding-left",
                "padding-right",
            ),
            $prefix: "-"
        );
    }

    .md\:py {
        @include modifiers(
            $map: $padding-map,
            $attribute: (
                "padding-top",
                "padding-bottom",
            ),
            $prefix: "-"
        );
    }

    .md\:pt {
        @include modifiers(
            $map: $padding-map,
            $attribute: (
                "padding-top",
            ),
            $prefix: "-"
        );
    }

    .md\:pr {
        @include modifiers(
            $map: $padding-map,
            $attribute: (
                "padding-right",
            ),
            $prefix: "-"
        );
    }

    .md\:pb {
        @include modifiers(
            $map: $padding-map,
            $attribute: (
                "padding-bottom",
            ),
            $prefix: "-"
        );
    }

    .md\:pl {
        @include modifiers(
            $map: $padding-map,
            $attribute: (
                "padding-left",
            ),
            $prefix: "-"
        );
    }
}

// @media (min-width: 200px) {
//     .xx\: {
//         @include base-styles();
//     }
// }

// lg styles

@media (min-width: 1024px) {
    .lg\:container {
        width: 100%;
    }

    @media (min-width: 640px) {
        .lg\:container {
            max-width: 640px;
        }
    }

    @media (min-width: 768px) {
        .lg\:container {
            max-width: 768px;
        }
    }

    @media (min-width: 1024px) {
        .lg\:container {
            max-width: 1024px;
        }
    }

    @media (min-width: 1280px) {
        .lg\:container {
            max-width: 1280px;
        }
    }

    @media (min-width: 1536px) {
        .lg\:container {
            max-width: 1536px;
        }
    }
    .lg\:p {
        @include modifiers(
            $map: $padding-map,
            $attribute: "padding",
            $prefix: "-"
        );
    }

    .lg\:px {
        @include modifiers(
            $map: $padding-map,
            $attribute: (
                "padding-left",
                "padding-right",
            ),
            $prefix: "-"
        );
    }

    .lg\:py {
        @include modifiers(
            $map: $padding-map,
            $attribute: (
                "padding-top",
                "padding-bottom",
            ),
            $prefix: "-"
        );
    }

    .lg\:pt {
        @include modifiers(
            $map: $padding-map,
            $attribute: (
                "padding-top",
            ),
            $prefix: "-"
        );
    }

    .lg\:pr {
        @include modifiers(
            $map: $padding-map,
            $attribute: (
                "padding-right",
            ),
            $prefix: "-"
        );
    }

    .lg\:pb {
        @include modifiers(
            $map: $padding-map,
            $attribute: (
                "padding-bottom",
            ),
            $prefix: "-"
        );
    }

    .lg\:pl {
        @include modifiers(
            $map: $padding-map,
            $attribute: (
                "padding-left",
            ),
            $prefix: "-"
        );
    }
}

// xl styles

@media (min-width: 1280px) {
    .xl\:container {
        width: 100%;
    }

    @media (min-width: 640px) {
        .xl\:container {
            max-width: 640px;
        }
    }

    @media (min-width: 768px) {
        .xl\:container {
            max-width: 768px;
        }
    }

    @media (min-width: 1024px) {
        .xl\:container {
            max-width: 1024px;
        }
    }

    @media (min-width: 1280px) {
        .xl\:container {
            max-width: 1280px;
        }
    }

    @media (min-width: 1536px) {
        .xl\:container {
            max-width: 1536px;
        }
    }
    .xl\:p {
        @include modifiers(
            $map: $padding-map,
            $attribute: "padding",
            $prefix: "-"
        );
    }

    .xl\:px {
        @include modifiers(
            $map: $padding-map,
            $attribute: (
                "padding-left",
                "padding-right",
            ),
            $prefix: "-"
        );
    }

    .xl\:py {
        @include modifiers(
            $map: $padding-map,
            $attribute: (
                "padding-top",
                "padding-bottom",
            ),
            $prefix: "-"
        );
    }

    .xl\:pt {
        @include modifiers(
            $map: $padding-map,
            $attribute: (
                "padding-top",
            ),
            $prefix: "-"
        );
    }

    .xl\:pr {
        @include modifiers(
            $map: $padding-map,
            $attribute: (
                "padding-right",
            ),
            $prefix: "-"
        );
    }

    .xl\:pb {
        @include modifiers(
            $map: $padding-map,
            $attribute: (
                "padding-bottom",
            ),
            $prefix: "-"
        );
    }

    .xl\:pl {
        @include modifiers(
            $map: $padding-map,
            $attribute: (
                "padding-left",
            ),
            $prefix: "-"
        );
    }
}

// 2xl styles

@media (min-width: 1536px) {
    .\32xl\:container {
        width: 100%;
    }

    @media (min-width: 640px) {
        .\32xl\:container {
            max-width: 640px;
        }
    }

    @media (min-width: 768px) {
        .\32xl\:container {
            max-width: 768px;
        }
    }

    @media (min-width: 1024px) {
        .\32xl\:container {
            max-width: 1024px;
        }
    }

    @media (min-width: 1280px) {
        .\32xl\:container {
            max-width: 1280px;
        }
    }

    @media (min-width: 1536px) {
        .\32xl\:container {
            max-width: 1536px;
        }
    }
    .\32xl\:p {
        @include modifiers(
            $map: $padding-map,
            $attribute: "padding",
            $prefix: "-"
        );
    }

    .\32xl\:px {
        @include modifiers(
            $map: $padding-map,
            $attribute: (
                "padding-left",
                "padding-right",
            ),
            $prefix: "-"
        );
    }

    .\32xl\:py {
        @include modifiers(
            $map: $padding-map,
            $attribute: (
                "padding-top",
                "padding-bottom",
            ),
            $prefix: "-"
        );
    }

    .\32xl\:pt {
        @include modifiers(
            $map: $padding-map,
            $attribute: (
                "padding-top",
            ),
            $prefix: "-"
        );
    }

    .\32xl\:pr {
        @include modifiers(
            $map: $padding-map,
            $attribute: (
                "padding-right",
            ),
            $prefix: "-"
        );
    }

    .\32xl\:pb {
        @include modifiers(
            $map: $padding-map,
            $attribute: (
                "padding-bottom",
            ),
            $prefix: "-"
        );
    }

    .\32xl\:pl {
        @include modifiers(
            $map: $padding-map,
            $attribute: (
                "padding-left",
            ),
            $prefix: "-"
        );
    }
}
